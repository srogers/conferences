# The Document model contains options that are passed to the document generators, the generation status, and the
# final result document if generation was successful.
class Document < ApplicationRecord

  belongs_to :creator,   class_name: "User"

  mount_uploader :attachment, DocumentUploader

  before_save  :initialize_values
  before_destroy :destroy_uploader

  QUEUED  = 'queued'.freeze
  WORKING  = 'working'.freeze
  COMPLETE = 'complete'.freeze
  FAILED   = 'failed'.freeze
  STATUS_VALUES = [ QUEUED, WORKING, COMPLETE, FAILED ].freeze

  PDF = 'PDF'.freeze
  CSV = 'CSV'.freeze
  FORMATS = [PDF, CSV].freeze

  def initialize_values
    self.status = QUEUED
    self.format = PDF if format.blank?
    # set a default option if nothing is set
    self.events = true if options.map{|k,v| k.to_s if v}.compact.empty?
    # Set the name based on the options - what will be in the file
    self.name = [options.map{|k,v| k.to_s if v}.compact.join('_'),  '.', format&.downcase].join('')
  end

  def working?
    status == WORKING
  end

  def complete?
    status == COMPLETE
  end

  def failed?
    status == FAILED
  end

  # These methods must avoid triggering any update callbacks or a loop will be generated by :perform
  def working!
    update_column :status, WORKING
  end

  def complete!
    update_column :status, COMPLETE
  end

  def failed!
    update_column :status, FAILED
  end

  def deletable?
    complete? || failed?
  end

  # options are boolean attributes of the model that are set from the creation form.
  def options
    # Currently supplements only affects CSV
    { events: events, presentations: presentations, speakers: speakers, publications: publications, supplements: supplements }
  end

  def destroy_uploader
    remove_attachment!
  end
end
